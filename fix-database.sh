#!/bin/bash

echo "üîß CORRIGINDO CONEX√ÉO POSTGRESQL..."
echo "=================================="

# Parar servidor atual
echo "1. Parando servidor atual..."
pkill -f "ts-node"
pkill -f "vite"

# Backup do server.ts original
echo "2. Fazendo backup do server.ts..."
cp src/server.ts src/server.ts.backup

# Substituir server.ts pelo corrigido
echo "3. Aplicando corre√ß√£o do server.ts..."
# (O c√≥digo corrigido est√° no artifact acima)

# Verificar se PostgreSQL est√° rodando localmente
echo "4. Verificando PostgreSQL local..."
if pg_isready -h localhost -p 5432 2>/dev/null; then
    echo "‚úÖ PostgreSQL local encontrado"
    echo "üìù Usando configura√ß√£o localhost"
    
    # Criar database justiconecta se n√£o existir
    createdb -h localhost -U postgres justiconecta 2>/dev/null || echo "Database justiconecta j√° existe"
    
else
    echo "‚ö†Ô∏è  PostgreSQL local n√£o encontrado"
    echo "üí° Op√ß√µes:"
    echo "   1. Instalar PostgreSQL: brew install postgresql (Mac) ou apt install postgresql (Ubuntu)"
    echo "   2. Iniciar container Docker: docker run --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres"
    echo "   3. Sistema funcionar√° em modo FALLBACK"
fi

# Reiniciar servidor
echo "5. Reiniciando servidor..."
npm run dev &

echo ""
echo "üéâ CORRE√á√ÉO APLICADA!"
echo ""
echo "üåê Teste agora:"
echo "   http://localhost:5173 (Frontend)"
echo "   http://localhost:3000/api/health (Backend Health)"
echo ""
echo "üí° Se ainda n√£o funcionar:"
echo "   1. Verifique logs no terminal"
echo "   2. Sistema funcionar√° em modo desenvolvimento"
echo "   3. Execute: docker run --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres"